{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentMode","setMode","sessionLength","setSession","breakLength","setBreak","active","setActive","sessionTimer","setSTimer","breakTimer","setBTimer","audioElem","useRef","myInterval","handleLenghtBreak","e","direction","target","dataset","sign","prevValue","handleLenghtSession","manageTime","totSeconds","current","play","minutes","parseInt","toString","length","seconds","displayTime","useEffect","setInterval","prev","clearInterval","className","id","onClick","pause","currentTime","src","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d64d531.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction App() {\r\n  const [currentMode, setMode] = useState('Session');\r\n  const [sessionLength, setSession] = useState(25);\r\n  const [breakLength, setBreak] = useState(5);\r\n  const [active, setActive] = useState(false);\r\n  const [sessionTimer, setSTimer] = useState(sessionLength*60)\r\n  const [breakTimer, setBTimer] = useState(breakLength*60)\r\n  let audioElem = useRef(null)\r\n  let myInterval = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (active) {\r\n      if (currentMode === 'Session') {\r\n        myInterval.current = setInterval(() => {\r\n          setSTimer(prev => prev-1)\r\n        }, 1000)\r\n      } else if (currentMode === 'Break') {\r\n        myInterval.current = setInterval(() => {\r\n          setBTimer(prev => prev-1)\r\n        }, 1000)\r\n      }\r\n    }\r\n    return (() => {\r\n      clearInterval(myInterval.current)\r\n    })\r\n  }, [active, currentMode])\r\n\r\n  function handleLenghtBreak(e) {\r\n    if (!active) {\r\n      const direction = e.target.dataset.sign\r\n      if (direction === '-' && breakLength > 1) {\r\n        setBreak(prevValue => {\r\n          setBTimer((prevValue - 1)*60)\r\n          return prevValue - 1\r\n        })\r\n      } else if (direction === '+' && breakLength < 60) {\r\n        setBreak(prevValue => {\r\n          setBTimer((prevValue + 1)*60)\r\n          return prevValue + 1\r\n        })\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  function handleLenghtSession(e) {\r\n    if (!active) {\r\n      const direction = e.target.dataset.sign\r\n      if (direction === '-' && sessionLength > 1) {\r\n        setSession(prevValue => {\r\n          setSTimer((prevValue - 1)*60)\r\n          return prevValue - 1\r\n        })\r\n      } else if (direction === '+' && sessionLength < 60) {\r\n        setSession(prevValue => {\r\n          setSTimer((prevValue + 1)*60)\r\n          return prevValue + 1\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  function start() {\r\n    setActive(prev => {\r\n      return(!prev)\r\n    })\r\n  }\r\n  \r\n  function reset() {\r\n    setActive(false)\r\n    setMode('Session')\r\n    setSession(25)\r\n    setBreak(5)\r\n    setSTimer(25*60)\r\n    setBTimer(5*60)\r\n    audioElem.current.pause()\r\n    audioElem.current.currentTime = 0\r\n  }\r\n\r\n  function manageTime(totSeconds) {\r\n    if (totSeconds === -1 && currentMode ==='Session') {\r\n      setMode('Break')\r\n      setSTimer(sessionLength*60)\r\n      audioElem.current.play()\r\n    }  \r\n    if (totSeconds === -1 && currentMode ==='Break') {\r\n      setMode('Session')\r\n      setBTimer(breakLength*60)\r\n      audioElem.current.play()\r\n    }  \r\n    return displayTime(totSeconds)\r\n  }\r\n  \r\n  function displayTime(totSeconds) {\r\n    let minutes = parseInt(totSeconds / 60).toString()\r\n    totSeconds = (totSeconds % 60).toString()\r\n    minutes = minutes.length > 1 ?\r\n      `${minutes}` :\r\n      `0${minutes}`\r\n    let seconds = totSeconds.length > 1 ?\r\n      `${totSeconds}` :\r\n      `0${totSeconds}`\r\n    return `${minutes}:${seconds}`\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"main-title\">25 + 5 Clock</div>\r\n      <div className=\"length-container\">\r\n        <div>\r\n          <div id=\"break-label\">Break Length</div>\r\n          <div className=\"ctl\">\r\n            <button id=\"break-decrement\" onClick={handleLenghtBreak} data-sign='-'>\r\n              <i className=\"fas fa-arrow-down\" data-sign='-'></i>\r\n            </button>\r\n            <div id=\"break-length\">{breakLength}</div>\r\n            <button id=\"break-increment\" onClick={handleLenghtBreak} data-sign='+'>\r\n              <i className=\"fas fa-arrow-up\" data-sign='+'></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div id=\"session-label\">Session Length</div>\r\n          <div className=\"ctl\">\r\n            <button id=\"session-decrement\" onClick={handleLenghtSession} data-sign='-'>\r\n              <i className=\"fas fa-arrow-down\"data-sign='-'></i>\r\n            </button>\r\n            <div id=\"session-length\">{sessionLength}</div>\r\n            <button id=\"session-increment\" onClick={handleLenghtSession} data-sign='+'>\r\n              <i className=\"fas fa-arrow-up\" data-sign='+'></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">\r\n        <div id=\"timer-label\">{currentMode}</div>\r\n      <div id=\"time-left\">{\r\n        currentMode === 'Session' ?\r\n        manageTime(sessionTimer) :\r\n        manageTime(breakTimer)\r\n      }\r\n      </div>\r\n      </div>\r\n      <div className=\"control\">\r\n        <button id=\"start_stop\" onClick={start}>\r\n          <i className=\"fas fa-play\"></i>\r\n          <i className=\"fas fa-pause\"></i>\r\n        </button>\r\n        <button id=\"reset\" onClick={reset}>\r\n          <i className=\"fas fa-sync-alt\"></i>\r\n        </button>\r\n      </div>\r\n      <audio src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\" id=\"beep\" ref={audioElem}></audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}